---
language_tabs: # must be one of https://github.com/rouge-ruby/rouge/wiki/List-of-supported-languages-and-lexers
  - shell
  - ruby

includes:
  - '_errors.md.erb'

search: true

code_clipboard: true

meta:
  - name: description
    content: Documentation for the <%= config[:app_name] %> API
---

# Introduction

Welcome to the [<%= config[:app_name] %>](https://<%= config[:presentation_site_domain_name] %>) API documentation.

You need to study this guide if you want to integrate your application with Web-to-SMS Functionality via [<%= config[:app_name] %>](https://<%= config[:presentation_site_domain_name] %>).

# Base Endpoint

The endpoint that you should be sending your API requests to is:

<aside class="success">
https://<%= config[:app_domain_name] %>/v1/
</aside>

# Authentication

The endpoint, although public, it requires that you send your own, private, API Key as part of the HTTP `Authorization` header.

You can get and manage your API keys from the `Actions -> Settings` page inside the <%= config[:app_name] %> Web application.

Note that you can have many API keys active at the same time. This will be useful when you decide to decommission an old API key
and replace it with a new one. You might want to keep both active at the same time for a short period of time until all of your
systems that integrate with <%= config[:app_name] %> finally use the new API key. Or you can use two different API keys for
different purposes. It's up to you.

In the following paragraphs, where we describe the differen API features, we will give examples on how you would pass the Authorization
as part of the HTTP Request Headers, but until then, here is an example of a valid header:

`Authorization: Bearer 1212845e-3517-436f-8f31-86cfb51f6251`

Where `1212845e-3517-436f-8f31-86cfb51f6251`, is valid API key. Replace this, with your own API key.

**Important**: Treat the API keys as confidential as you keep your passwords. Do not store them in version control systems and do not reveal to
public. Always use end-to-end encryption (`HTTPS`) between the client application and the <%= config[:app_name] %> endpoints when using the API.

# API Reference

## Sending an SMS

```shell
$ curl -v -X POST 'https://sms-api.rayo.gr/v1/send_sms' \
  -H 'Content-Type: application/json' \
  -H 'Accept: application/json' \
  -H 'Authorization: Bearer 5a2a5816-5f32-4234-a9a1-7d59986c06a5' \
  -d '{
    "toMobileNumber":"6972669766",
    "fromLabel":"306972669766",
    "smsBody":"test message"
  }'
```

```ruby
# This Ruby example uses [Rest Client library](https://github.com/rest-client/rest-client).
# You can use any other Ruby library that can construct standard HTTPS requests.
#
require 'rest-client'

api_key = '5a2a5816-5f32-4234-a9a1-7d59986c06a5'
sms_body = 'test message'

url = 'https://sms-api.rayo.gr/v1/send_sms'
payload = {
  toMobileNumber: '6972669766',
  fromLabel: '306972669766',
  smsBody: sms_body
}.to_json
headers = {
  'Content-Type' => 'application/json',
  'Accept' => 'application/json',
  'Authorization' => "Bearer #{api_key}"
}

response = RestClient.post url, payload, headers
```

Sending an SMS requires you to send a `POST` request to the path `/send_sms`

The HTTP Request should have the following headers, as a minimum requirement:

### Request Headers

Name          | Value
------------- | ---------------------------------
Content-Type  | application/json
Accept        | application/json
Authorization | Bearer [your API key here]

For the `Authorization` header above, replace the `[your API key here]` with your
own API key. You can find instructions on how to get one [here](#authentication).

The payload of the request should be sent in the body of the request as a string.
The string should be a string encoding of a JSON object. The JSON object should
have the following properties:

### JSON Object Properties

Name                        | Type    | Description                                                                                                                                                                                                                                                                | Example
----------------------------|---------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------------------------------
`toMobileNumber`            | string  | The mobile number this sms will be sent to. It can be a comma-separated, semi-colon separated list of mobile numbers.                                                                                                                                                      | `306972669766` or `306972669766;306972669764`
`toGroup`                   | string  | The name of the Group this sms will be sent to. Group is one of your groups regisered in the application.                                                                                                                                                                  | `High Valued Customers`
`fromLabel`                 | string  | The sender identifier. One of the sender ids that you have registered in the application.                                                                                                                                                                                  | `BOXNOW`
`smsBody`                   | string  | The SMS content.                                                                                                                                                                                                                                                           | `Hello! You have just won 5 Euro Gift Card!`
`clientRequestId`           | string  | The client request id that will be attached to the sms request. This is optional. It can be used for search/reporting. It's a business-level value that makes sense to your own business. The application does not process it at all, other than for indexing the message. | `9543212`
`callbackWhenProcessedFlag` | boolean | Default `false``. When `true``, SMS server will call the callback api endpoint to report back the status of delivery. You must have set up a callback api in the application settings.                                                                                     | `true`
`simulateSendFlag`          | boolean | Default `false`. When `true`, the SMS will not actually be delivered. This can be used to test the integration without consuming credits.                                                                                                                                  | `false`

### HTTP Response

#### Success

On successful sending of the HTTP request, you will get back a standard HTTP response code with value `200`. It will have
a body that will be a JSON object encoded as string. The JSON object will have the following structure:

Name                        | Type   | Description
----------------------------|--------|------------
`result`                    | object | JSON root level object. All the other properties, below, they are properties of this object.
`result.username`           | string | The username identified by the API key used in the incoming SMS request.
`result.resultCode`         | string | It will have the value "1" on success. Different from "1" on failure.
`result.resultDescription`  | string | It will have the value "SUCCESS" on success. Different from "SUCCESS" on failure.
`result.clientRequestId`    | string | It will be either `null` or it will have the value of the `clientRequestId` sent in the incoming SMS request.
`result.smsServerRequestId` | string | A unique identifier from the SMS server side. This uniquely identifies your SMS request.

Take a look at the `Example Response JSON object`:

> Example Success Response JSON object:

```json
{
  "result": {
    "username": "user1",
    "resultCode": "1",
    "resultDescription": "SUCCESS",
    "clientRequestId": "932831",
    "smsServerRequestId": "cc479845-0f15-4ae7-b645-6ef6489868c1"
  }
}
```

#### Error

With regards to error handling, you can [read the corresponding section bellow](#errors).


## Get Balance in Credits





> To authorize, use this code:

```ruby
require 'kittn'

api = Kittn::APIClient.authorize!('meowmeowmeow')
```

```python
import kittn

api = kittn.authorize('meowmeowmeow')
```

```shell
# With shell, you can just pass the correct header with each request
curl "api_endpoint_here" \
  -H "Authorization: meowmeowmeow"
```

```javascript
const kittn = require('kittn');

let api = kittn.authorize('meowmeowmeow');
```

> Make sure to replace `meowmeowmeow` with your API key.

Kittn uses API keys to allow access to the API. You can register a new Kittn API key at our [developer portal](http://example.com/developers).

Kittn expects for the API key to be included in all API requests to the server in a header that looks like the following:

`Authorization: meowmeowmeow`

<aside class="notice">
You must replace <code>meowmeowmeow</code> with your personal API key.
</aside>

# Kittens

## Get All Kittens

```ruby
require 'kittn'

api = Kittn::APIClient.authorize!('meowmeowmeow')
api.kittens.get
```

```python
import kittn

api = kittn.authorize('meowmeowmeow')
api.kittens.get()
```

```shell
curl "http://example.com/api/kittens" \
  -H "Authorization: meowmeowmeow"
```

```javascript
const kittn = require('kittn');

let api = kittn.authorize('meowmeowmeow');
let kittens = api.kittens.get();
```

> The above command returns JSON structured like this:

```json
[
  {
    "id": 1,
    "name": "Fluffums",
    "breed": "calico",
    "fluffiness": 6,
    "cuteness": 7
  },
  {
    "id": 2,
    "name": "Max",
    "breed": "unknown",
    "fluffiness": 5,
    "cuteness": 10
  }
]
```

This endpoint retrieves all kittens.

### HTTP Request

`GET http://example.com/api/kittens`

### Query Parameters

Parameter | Default | Description
--------- | ------- | -----------
include_cats | false | If set to true, the result will also include cats.
available | true | If set to false, the result will include kittens that have already been adopted.

<aside class="success">
Remember — a happy kitten is an authenticated kitten!
</aside>

## Get a Specific Kitten

```ruby
require 'kittn'

api = Kittn::APIClient.authorize!('meowmeowmeow')
api.kittens.get(2)
```

```python
import kittn

api = kittn.authorize('meowmeowmeow')
api.kittens.get(2)
```

```shell
curl "http://example.com/api/kittens/2" \
  -H "Authorization: meowmeowmeow"
```

```javascript
const kittn = require('kittn');

let api = kittn.authorize('meowmeowmeow');
let max = api.kittens.get(2);
```

> The above command returns JSON structured like this:

```json
{
  "id": 2,
  "name": "Max",
  "breed": "unknown",
  "fluffiness": 5,
  "cuteness": 10
}
```

This endpoint retrieves a specific kitten.

<aside class="warning">Inside HTML code blocks like this one, you can't use Markdown, so use <code>&lt;code&gt;</code> blocks to denote code.</aside>

### HTTP Request

`GET http://example.com/kittens/<ID>`

### URL Parameters

Parameter | Description
--------- | -----------
ID | The ID of the kitten to retrieve

## Delete a Specific Kitten

```ruby
require 'kittn'

api = Kittn::APIClient.authorize!('meowmeowmeow')
api.kittens.delete(2)
```

```python
import kittn

api = kittn.authorize('meowmeowmeow')
api.kittens.delete(2)
```

```shell
curl "http://example.com/api/kittens/2" \
  -X DELETE \
  -H "Authorization: meowmeowmeow"
```

```javascript
const kittn = require('kittn');

let api = kittn.authorize('meowmeowmeow');
let max = api.kittens.delete(2);
```

> The above command returns JSON structured like this:

```json
{
  "id": 2,
  "deleted" : ":("
}
```

This endpoint deletes a specific kitten.

### HTTP Request

`DELETE http://example.com/kittens/<ID>`

### URL Parameters

Parameter | Description
--------- | -----------
ID | The ID of the kitten to delete
